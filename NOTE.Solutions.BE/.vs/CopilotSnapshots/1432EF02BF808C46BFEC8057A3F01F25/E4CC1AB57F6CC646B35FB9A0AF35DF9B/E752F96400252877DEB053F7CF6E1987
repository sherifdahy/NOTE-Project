using ETA.Consume.Interfaces;
using Newtonsoft.Json;
using Microsoft.Extensions.Options;
using System.Net;
using ETA.Consume.Contracts.Error.Responses;
using NOTE.Solutions.Abstractions;

namespace ETA.Consume.Services;

public class IdentityApiCall : IIdentityApiCall
{
    private readonly string _baseUrl;
    private readonly HttpClient _client;
    
    public IdentityApiCall(IOptions<ETAOptions> options)
    {
        _baseUrl = options.Value.IdentityBaseUrl;
        _client = new HttpClient { BaseAddress = new Uri(_baseUrl) };
    }

    private void AddHeaders(Dictionary<string, string>? headers)
    {
        if (headers != null)
        {
            foreach (var header in headers)
            {
                if (!_client.DefaultRequestHeaders.Contains(header.Key))
                {
                    _client.DefaultRequestHeaders.Add(header.Key, header.Value);
                }
            }
        }
    }

    public async Task<Result<T2>> PostReturnAsync<T2>(string url, HttpContent content, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await _client.PostAsync(url, content);
        var responseContent = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            var data = JsonConvert.DeserializeObject<T2>(responseContent);
            return Result.Success(data);
        }
        else if(response.StatusCode == HttpStatusCode.BadRequest)
        {
            var error = JsonConvert.DeserializeObject<AuthErrorResponse>(responseContent);
            return Result.Failure<T2>(new Error(response.StatusCode.ToString(),error?.Error!,(int)response.StatusCode));
        }
        return Result.Failure<T2>(new Error(response.StatusCode.ToString(), responseContent, (int)response.StatusCode));
    }
}
