using ETA.Consume.Contracts.Error.Responses;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using NOTE.Solutions.Abstractions;
using System.Net.Http;
using System.Net.Http.Headers;

namespace ETA.Consume.Services;

public class IdentityApiCall : IIdentityApiCall
{
    private readonly string _baseUrl;
    private readonly HttpClient _client;

    public IdentityApiCall(IOptions<ETAOptions> options)
    {
        _baseUrl = options.Value.IdSrvBaseUrl;
        _client = new HttpClient { BaseAddress = new Uri(_baseUrl) };
    }

    private void AddHeaders(HttpRequestMessage request, Dictionary<string, string>? headers)
    {
        if (headers != null)
        {
            foreach (var header in headers)
            {
                if (!request.Headers.Contains(header.Key))
                {
                    request.Headers.Add(header.Key, header.Value);
                }
            }
        }
        // Default headers
        if (!request.Headers.Contains("Content-Type"))
            request.Headers.TryAddWithoutValidation("Content-Type", "application/json");
        if (!request.Headers.Contains("User-Agent"))
            request.Headers.TryAddWithoutValidation("User-Agent", "ETA-Consume-Client");
    }

    private async Task<Error> ParseErrorResponse(HttpResponseMessage response)
    {
        var content = await response.Content.ReadAsStringAsync();
        try
        {
            var errorResponse = JsonConvert.DeserializeObject<AuthErrorResponse>(content);
            return new Error(response.StatusCode.ToString(), errorResponse?.Error ?? content, (int)response.StatusCode);
        }
        catch
        {
            return new Error(response.StatusCode.ToString(), content, (int)response.StatusCode);
        }
    }

    public async Task<Result<T2>> PostReturnAsync<T2>(string url, object entity, Dictionary<string, string>? headers = null)
    {
        var request = new HttpRequestMessage(HttpMethod.Post, url)
        {
            Content = new StringContent(JsonConvert.SerializeObject(entity), System.Text.Encoding.UTF8, "application/json")
        };
        AddHeaders(request, headers);
        var response = await _client.SendAsync(request);
        var content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode && !string.IsNullOrWhiteSpace(content))
        {
            var data = JsonConvert.DeserializeObject<T2>(content);
            return Result.Success(data);
        }
        return Result.Failure<T2>(await ParseErrorResponse(response));
    }
}
