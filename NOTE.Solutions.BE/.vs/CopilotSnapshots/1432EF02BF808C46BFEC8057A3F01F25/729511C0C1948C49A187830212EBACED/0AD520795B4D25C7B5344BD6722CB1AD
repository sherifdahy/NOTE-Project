using NOTE.Solutions.Entities.Entities.Address;
using NOTE.Solutions.BLL.Errors;
using Mapster;

namespace NOTE.Solutions.BLL.Services;

public class CityService(IUnitOfWork unitOfWork) : ICityService
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;

    public async Task<Result<CityResponse>> CreateAsync(CityRequest request)
    {
        if (_unitOfWork.Cities.IsExist(x => x.Code == request.Code || x.Name == request.Name))
            return Result.Failure<CityResponse>(CityErrors.Duplicated);

        var city = request.Adapt<City>();

        await _unitOfWork.Cities.AddAsync(city);
        await _unitOfWork.SaveAsync();

        return Result.Success(city.Adapt<CityResponse>());
    }

    public async Task<Result> DeleteAsync(int id)
    {
        if (id <= 0)
            return Result.Failure(CityErrors.InvalidId);

        var city = await _unitOfWork.Cities.GetByIdAsync(id);

        if (city is null)
            return Result.Failure(CityErrors.NotFound);

        _unitOfWork.Cities.Delete(city);
        await _unitOfWork.SaveAsync();

        return Result.Success();
    }

    public async Task<Result<IEnumerable<CityResponse>>> GetAllAsync()
    {
        var cities = await _unitOfWork.Cities.FindAllAsync(x => true);

        return Result.Success(cities.Adapt<IEnumerable<CityResponse>>());
    }

    public async Task<Result<CityResponse>> GetByIdAsync(int id)
    {
        if (id <= 0)
            return Result.Failure<CityResponse>(CityErrors.InvalidId);

        var city = await _unitOfWork.Cities.FindAsync(x => x.Id == id);

        if (city is null)
            return Result.Failure<CityResponse>(CityErrors.NotFound);

        return Result.Success(city.Adapt<CityResponse>());
    }

    public async Task<Result> UpdateAsync(int id, CityRequest request)
    {
        if (id <= 0)
            return Result.Failure(CityErrors.InvalidId);

        if (_unitOfWork.Cities.IsExist(x => (x.Code == request.Code || x.Name == request.Name) && x.Id != id))
            return Result.Failure(CityErrors.Duplicated);

        var city = await _unitOfWork.Cities.GetByIdAsync(id);
        if (city is null)
            return Result.Failure(CityErrors.NotFound);

        request.Adapt(city);

        _unitOfWork.Cities.Update(city);
        await _unitOfWork.SaveAsync();

        return Result.Success();
    }
}
