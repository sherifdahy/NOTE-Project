using ETA.Consume.Interfaces;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;

namespace ETA.Consume.Services;

public class ApiCall : IApiCall
{
    private readonly string baseUrl;
    private readonly HttpClient client;

    public ApiCall(IConfiguration configuration)
    {
        //baseUrl = configuration.GetSection("api")?["baseUrl"] ?? throw new ArgumentNullException("Base URL is not configured.");
        baseUrl = "https://id.preprod.eta.gov.eg/connect/token";
        client = new HttpClient { BaseAddress = new Uri(baseUrl) };
    }

    private void AddHeaders(Dictionary<string, string>? headers)
    {
        if (headers != null)
        {
            foreach (var header in headers)
            {
                if (!client.DefaultRequestHeaders.Contains(header.Key))
                {
                    client.DefaultRequestHeaders.Add(header.Key, header.Value);
                }
            }
        }
    }

    public async Task<IEnumerable<T>> GetAllAsync<T>(string apiName, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await client.GetAsync(apiName);
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadAsAsync<IEnumerable<T>>();
    }
    public async Task<T> GetByIdAsync<T>(string url, int id, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await client.GetAsync($"{url}/{id}");
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadAsAsync<T>();
    }

    public async Task<bool> CreateAsync<T>(string url, T entity, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await client.PostAsJsonAsync(url, entity);
        return response.IsSuccessStatusCode;
    }
    public async Task<T2> PostReturnAsync<T1, T2>(string url, T1 entity, Dictionary<string, string>? headers = null, bool asFormUrlEncoded = false)
    {
        AddHeaders(headers);
        HttpResponseMessage response;
        if (asFormUrlEncoded)
        {
            var keyValueContent = entity!.GetType()
                .GetProperties()
                .ToDictionary(prop => prop.Name, prop => prop.GetValue(entity)?.ToString() ?? string.Empty);
            var content = new FormUrlEncodedContent(keyValueContent);
            response = await client.PostAsync(url, content);
        }
        else
        {
            response = await client.PostAsJsonAsync(url, entity);
        }
        response.EnsureSuccessStatusCode();
        string responseContent = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<T2>(responseContent);
    }
    public async Task<bool> UpdateAsync<T>(string url, int id, T entity, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await client.PutAsJsonAsync($"{url}/{id}", entity);
        return response.IsSuccessStatusCode;
    }

    public async Task<bool> DeleteAsync<T>(string url, int id, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await client.DeleteAsync($"{url}?id={id}");
        return response.IsSuccessStatusCode;
    }

    public async Task<IEnumerable<T>> GetAllByIdAsync<T>(string url, int id, Dictionary<string, string>? headers = null)
    {
        AddHeaders(headers);
        var response = await client.GetAsync($"{url}/{id}");
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadAsAsync<IEnumerable<T>>();
    }
}
